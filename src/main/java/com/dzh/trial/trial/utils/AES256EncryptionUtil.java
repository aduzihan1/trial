package com.dzh.trial.trial.utils;

import java.security.Security;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

import com.alibaba.fastjson.JSONObject;

public class AES256EncryptionUtil {
    public static final String TAG = AES256EncryptionUtil.class.getSimpleName();
    public static final String ALGORITHM = "AES/ECB/PKCS7Padding";
    //prd:yurU8Zhr&C%8ijBfAGB^l9*bI@0jLuh5
	//test:ndNai8UpO^dc$yJRWRgN2h4zn%I9e8CW
    private static String mPassword = "ndNai8UpO^dc$yJRWRgN2h4zn%I9e8CW";
    //
    public static void main(String[] args) throws  Exception{
		try {
			JSONObject json = new JSONObject();
			json.put("page", 1);
			json.put("pagesize", 1);

			String data = json.toJSONString();

			System.out.println(Base64.getEncoder().encodeToString(Aes256Encode(data, mPassword.getBytes())));

			String resStr = "";
			System.out.println(Aes256Decode(Base64.getDecoder().decode(resStr.getBytes()), mPassword.getBytes()));
		} catch (Exception e) {
			System.out.println(e.getCause());
		}
	}

	public static boolean initialized = false;

	/**
	 * @param String
	 *            str 要被加密的字符串
	 * @param byte[]
	 *            key 加/解密要用的长度为32的字节数组（256位）密钥
	 * @return byte[] 加密后的字节数组
	 */
	public static byte[] Aes256Encode(String str, byte[] key) {
		initialize();
		byte[] result = null;
		try {
			key = mPassword.getBytes();
			Cipher cipher = Cipher.getInstance(ALGORITHM, "BC");
			SecretKeySpec keySpec = new SecretKeySpec(key, "AES"); // 生成加密解密需要的Key
			cipher.init(Cipher.ENCRYPT_MODE, keySpec);
			result = cipher.doFinal(str.getBytes("UTF-8"));
		} catch (Exception e) {
			System.out.println(e.getCause());
		}
		return result;
	}

	/**
	 * @param byte[]
	 *            bytes 要被解密的字节数组
	 * @param byte[]
	 *            key 加/解密要用的长度为32的字节数组（256位）密钥
	 * @return String 解密后的字符串
	 */
	public static String Aes256Decode(byte[] bytes, byte[] key) {
		initialize();
		String result = null;
		try {
			key = mPassword.getBytes();
			Cipher cipher = Cipher.getInstance(ALGORITHM, "BC");
			SecretKeySpec keySpec = new SecretKeySpec(key, "AES"); // 生成加密解密需要的Key
			cipher.init(Cipher.DECRYPT_MODE, keySpec);
			byte[] decoded = cipher.doFinal(bytes);
			result = new String(decoded, "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	public static void initialize() {
		if (initialized)
			return;
		Security.addProvider(new BouncyCastleProvider());
		initialized = true;
	}
}